// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class Util {
  /// Use the response to display the user_code to the user, asking them to go to verification_uri, then call poll().
  Future<DeviceFlowResponse> auth({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAuthConstMeta;

  Future<GithubUser> poll({required DeviceFlowResponse ongoing, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPollConstMeta;

  Future<String> getToken({required GithubUser user, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTokenConstMeta;

  Future<void> uploadFile(
      {required String repo,
      required String uuid,
      required GithubUser user,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUploadFileConstMeta;

  Future<void> updateFiles(
      {required String repo, required GithubUser user, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateFilesConstMeta;

  Future<List<String>> fontSearch({required String query, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFontSearchConstMeta;
}

class DeviceFlowResponse {
  final String deviceCode;
  final String userCode;
  final String verificationUri;
  final int interval;

  const DeviceFlowResponse({
    required this.deviceCode,
    required this.userCode,
    required this.verificationUri,
    required this.interval,
  });
}

class GithubUser {
  final String login;
  final int id;

  const GithubUser({
    required this.login,
    required this.id,
  });
}

class UtilImpl implements Util {
  final UtilPlatform _platform;
  factory UtilImpl(ExternalLibrary dylib) => UtilImpl.raw(UtilPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory UtilImpl.wasm(FutureOr<WasmModule> module) =>
      UtilImpl(module as ExternalLibrary);
  UtilImpl.raw(this._platform);
  Future<DeviceFlowResponse> auth({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_auth(port_),
      parseSuccessData: _wire2api_device_flow_response,
      constMeta: kAuthConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAuthConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "auth",
        argNames: [],
      );

  Future<GithubUser> poll({required DeviceFlowResponse ongoing, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_device_flow_response(ongoing);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_poll(port_, arg0),
      parseSuccessData: _wire2api_github_user,
      constMeta: kPollConstMeta,
      argValues: [ongoing],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPollConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "poll",
        argNames: ["ongoing"],
      );

  Future<String> getToken({required GithubUser user, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_github_user(user);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_token(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetTokenConstMeta,
      argValues: [user],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTokenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_token",
        argNames: ["user"],
      );

  Future<void> uploadFile(
      {required String repo,
      required String uuid,
      required GithubUser user,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(repo);
    var arg1 = _platform.api2wire_String(uuid);
    var arg2 = _platform.api2wire_box_autoadd_github_user(user);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_upload_file(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kUploadFileConstMeta,
      argValues: [repo, uuid, user],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUploadFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "upload_file",
        argNames: ["repo", "uuid", "user"],
      );

  Future<void> updateFiles(
      {required String repo, required GithubUser user, dynamic hint}) {
    var arg0 = _platform.api2wire_String(repo);
    var arg1 = _platform.api2wire_box_autoadd_github_user(user);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update_files(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateFilesConstMeta,
      argValues: [repo, user],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateFilesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_files",
        argNames: ["repo", "user"],
      );

  Future<List<String>> fontSearch({required String query, dynamic hint}) {
    var arg0 = _platform.api2wire_String(query);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_font_search(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kFontSearchConstMeta,
      argValues: [query],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFontSearchConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "font_search",
        argNames: ["query"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  DeviceFlowResponse _wire2api_device_flow_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DeviceFlowResponse(
      deviceCode: _wire2api_String(arr[0]),
      userCode: _wire2api_String(arr[1]),
      verificationUri: _wire2api_String(arr[2]),
      interval: _wire2api_u64(arr[3]),
    );
  }

  GithubUser _wire2api_github_user(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GithubUser(
      login: _wire2api_String(arr[0]),
      id: _wire2api_u64(arr[1]),
    );
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class UtilPlatform extends FlutterRustBridgeBase<UtilWire> {
  UtilPlatform(ffi.DynamicLibrary dylib) : super(UtilWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_DeviceFlowResponse>
      api2wire_box_autoadd_device_flow_response(DeviceFlowResponse raw) {
    final ptr = inner.new_box_autoadd_device_flow_response_1();
    _api_fill_to_wire_device_flow_response(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_GithubUser> api2wire_box_autoadd_github_user(
      GithubUser raw) {
    final ptr = inner.new_box_autoadd_github_user_1();
    _api_fill_to_wire_github_user(raw, ptr.ref);
    return ptr;
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_1(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_device_flow_response(
      DeviceFlowResponse apiObj, ffi.Pointer<wire_DeviceFlowResponse> wireObj) {
    _api_fill_to_wire_device_flow_response(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_github_user(
      GithubUser apiObj, ffi.Pointer<wire_GithubUser> wireObj) {
    _api_fill_to_wire_github_user(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_device_flow_response(
      DeviceFlowResponse apiObj, wire_DeviceFlowResponse wireObj) {
    wireObj.device_code = api2wire_String(apiObj.deviceCode);
    wireObj.user_code = api2wire_String(apiObj.userCode);
    wireObj.verification_uri = api2wire_String(apiObj.verificationUri);
    wireObj.interval = api2wire_u64(apiObj.interval);
  }

  void _api_fill_to_wire_github_user(
      GithubUser apiObj, wire_GithubUser wireObj) {
    wireObj.login = api2wire_String(apiObj.login);
    wireObj.id = api2wire_u64(apiObj.id);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class UtilWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  UtilWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  UtilWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<wire_Database> new_box_autoadd_database_0() {
    return _new_box_autoadd_database_0();
  }

  late final _new_box_autoadd_database_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Database> Function()>>(
          'new_box_autoadd_database_0');
  late final _new_box_autoadd_database_0 = _new_box_autoadd_database_0Ptr
      .asFunction<ffi.Pointer<wire_Database> Function()>();

  ffi.Pointer<wire_OpenDocumentId> new_box_autoadd_open_document_id_0() {
    return _new_box_autoadd_open_document_id_0();
  }

  late final _new_box_autoadd_open_document_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OpenDocumentId> Function()>>(
          'new_box_autoadd_open_document_id_0');
  late final _new_box_autoadd_open_document_id_0 =
      _new_box_autoadd_open_document_id_0Ptr
          .asFunction<ffi.Pointer<wire_OpenDocumentId> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_auth(
    int port_,
  ) {
    return _wire_auth(
      port_,
    );
  }

  late final _wire_authPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_auth');
  late final _wire_auth = _wire_authPtr.asFunction<void Function(int)>();

  void wire_poll(
    int port_,
    ffi.Pointer<wire_DeviceFlowResponse> ongoing,
  ) {
    return _wire_poll(
      port_,
      ongoing,
    );
  }

  late final _wire_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_DeviceFlowResponse>)>>('wire_poll');
  late final _wire_poll = _wire_pollPtr
      .asFunction<void Function(int, ffi.Pointer<wire_DeviceFlowResponse>)>();

  void wire_get_token(
    int port_,
    ffi.Pointer<wire_GithubUser> user,
  ) {
    return _wire_get_token(
      port_,
      user,
    );
  }

  late final _wire_get_tokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_GithubUser>)>>('wire_get_token');
  late final _wire_get_token = _wire_get_tokenPtr
      .asFunction<void Function(int, ffi.Pointer<wire_GithubUser>)>();

  void wire_upload_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> repo,
    ffi.Pointer<wire_uint_8_list> uuid,
    ffi.Pointer<wire_GithubUser> user,
  ) {
    return _wire_upload_file(
      port_,
      repo,
      uuid,
      user,
    );
  }

  late final _wire_upload_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_GithubUser>)>>('wire_upload_file');
  late final _wire_upload_file = _wire_upload_filePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_GithubUser>)>();

  void wire_update_files(
    int port_,
    ffi.Pointer<wire_uint_8_list> repo,
    ffi.Pointer<wire_GithubUser> user,
  ) {
    return _wire_update_files(
      port_,
      repo,
      user,
    );
  }

  late final _wire_update_filesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_GithubUser>)>>('wire_update_files');
  late final _wire_update_files = _wire_update_filesPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_GithubUser>)>();

  void wire_font_search(
    int port_,
    ffi.Pointer<wire_uint_8_list> query,
  ) {
    return _wire_font_search(
      port_,
      query,
    );
  }

  late final _wire_font_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_font_search');
  late final _wire_font_search = _wire_font_searchPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_DeviceFlowResponse>
      new_box_autoadd_device_flow_response_1() {
    return _new_box_autoadd_device_flow_response_1();
  }

  late final _new_box_autoadd_device_flow_response_1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_DeviceFlowResponse> Function()>>(
      'new_box_autoadd_device_flow_response_1');
  late final _new_box_autoadd_device_flow_response_1 =
      _new_box_autoadd_device_flow_response_1Ptr
          .asFunction<ffi.Pointer<wire_DeviceFlowResponse> Function()>();

  ffi.Pointer<wire_GithubUser> new_box_autoadd_github_user_1() {
    return _new_box_autoadd_github_user_1();
  }

  late final _new_box_autoadd_github_user_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_GithubUser> Function()>>(
          'new_box_autoadd_github_user_1');
  late final _new_box_autoadd_github_user_1 = _new_box_autoadd_github_user_1Ptr
      .asFunction<ffi.Pointer<wire_GithubUser> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_1(
    int len,
  ) {
    return _new_uint_8_list_1(
      len,
    );
  }

  late final _new_uint_8_list_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_1');
  late final _new_uint_8_list_1 = _new_uint_8_list_1Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_Database extends ffi.Opaque {}

class wire_OpenDocumentId extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_DeviceFlowResponse extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_code;

  external ffi.Pointer<wire_uint_8_list> user_code;

  external ffi.Pointer<wire_uint_8_list> verification_uri;

  @ffi.Uint64()
  external int interval;
}

class wire_GithubUser extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> login;

  @ffi.Uint64()
  external int id;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
