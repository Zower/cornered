// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.65.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<DocumentId> openDoc(
      {required String path, required int initialChapter, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = api2wire_usize(initialChapter);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_open_doc(port_, arg0, arg1),
      parseSuccessData: _wire2api_document_id,
      constMeta: kOpenDocConstMeta,
      argValues: [path, initialChapter],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpenDocConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "open_doc",
        argNames: ["path", "initialChapter"],
      );

  Future<ContentBlock> goNext({required DocumentId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_document_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_go_next(port_, arg0),
      parseSuccessData: _wire2api_content_block,
      constMeta: kGoNextConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGoNextConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "go_next",
        argNames: ["id"],
      );

  Future<ContentBlock> goPrev({required DocumentId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_document_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_go_prev(port_, arg0),
      parseSuccessData: _wire2api_content_block,
      constMeta: kGoPrevConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGoPrevConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "go_prev",
        argNames: ["id"],
      );

  Future<ContentBlock> getContent({required DocumentId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_document_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_content(port_, arg0),
      parseSuccessData: _wire2api_content_block,
      constMeta: kGetContentConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetContentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_content",
        argNames: ["id"],
      );

  Future<List<T>> getResources({required DocumentId id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_document_id(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_resources(port_, arg0),
      parseSuccessData: _wire2api_list_t,
      constMeta: kGetResourcesConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetResourcesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_resources",
        argNames: ["id"],
      );

  Future<String> auth({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_auth(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kAuthConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAuthConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "auth",
        argNames: [],
      );

  Future<void> poll({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_poll(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kPollConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPollConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "poll",
        argNames: [],
      );

  Future<void> sync2({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sync2(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSync2ConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSync2ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sync2",
        argNames: ["path"],
      );

  Future<Database> initDb({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_db(port_, arg0),
      parseSuccessData: (d) => _wire2api_database(d),
      constMeta: kInitDbConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitDbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_db",
        argNames: ["path"],
      );

  Future<Meta> getMeta({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_meta(port_, arg0),
      parseSuccessData: _wire2api_meta,
      constMeta: kGetMetaConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetMetaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_meta",
        argNames: ["id"],
      );

  Future<void> clearDb({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_clear_db(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kClearDbConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearDbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "clear_db",
        argNames: [],
      );

  Future<Definitions> getDefinition({required String word, dynamic hint}) {
    var arg0 = _platform.api2wire_String(word);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_definition(port_, arg0),
      parseSuccessData: _wire2api_definitions,
      constMeta: kGetDefinitionConstMeta,
      argValues: [word],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDefinitionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_definition",
        argNames: ["word"],
      );

  Future<List<Book>> addBookMethodDatabase(
      {required Database that, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_database(that);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_add_book__method__Database(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_book,
      constMeta: kAddBookMethodDatabaseConstMeta,
      argValues: [that, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddBookMethodDatabaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_book__method__Database",
        argNames: ["that", "path"],
      );

  Future<void> updateProgressMethodDatabase(
      {required Database that,
      required String id,
      required int chapter,
      required double offset,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_database(that);
    var arg1 = _platform.api2wire_String(id);
    var arg2 = api2wire_usize(chapter);
    var arg3 = api2wire_f64(offset);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_update_progress__method__Database(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateProgressMethodDatabaseConstMeta,
      argValues: [that, id, chapter, offset],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateProgressMethodDatabaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_progress__method__Database",
        argNames: ["that", "id", "chapter", "offset"],
      );

  Future<List<Book>> getBooksMethodDatabase(
      {required Database that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_database(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_books__method__Database(port_, arg0),
      parseSuccessData: _wire2api_list_book,
      constMeta: kGetBooksMethodDatabaseConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBooksMethodDatabaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_books__method__Database",
        argNames: ["that"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  Book _wire2api_book(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Book(
      uuid: _wire2api_String(arr[0]),
      path: _wire2api_String(arr[1]),
      position: _wire2api_position(arr[2]),
    );
  }

  ContentBlock _wire2api_content_block(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContentBlock(
      content: _wire2api_String(arr[0]),
      contentType: _wire2api_content_type(arr[1]),
    );
  }

  ContentType _wire2api_content_type(dynamic raw) {
    return ContentType.values[raw];
  }

  Database _wire2api_database(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Database(
      bridge: this,
    );
  }

  Definition _wire2api_definition(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Definition(
      definition: _wire2api_String(arr[0]),
      example: _wire2api_opt_String(arr[1]),
      synonyms: _wire2api_StringList(arr[2]),
    );
  }

  Definitions _wire2api_definitions(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Definitions(
      word: _wire2api_String(arr[0]),
      meanings: _wire2api_list_meaning(arr[1]),
    );
  }

  DocumentId _wire2api_document_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DocumentId(
      field0: _wire2api_u32(arr[0]),
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<Book> _wire2api_list_book(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_book).toList();
  }

  List<Definition> _wire2api_list_definition(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_definition).toList();
  }

  List<Meaning> _wire2api_list_meaning(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_meaning).toList();
  }

  List<T> _wire2api_list_t(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_t).toList();
  }

  Meaning _wire2api_meaning(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Meaning(
      partOfSpeech: _wire2api_String(arr[0]),
      definitions: _wire2api_list_definition(arr[1]),
    );
  }

  Meta _wire2api_meta(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Meta(
      title: _wire2api_opt_String(arr[0]),
      author: _wire2api_opt_String(arr[1]),
      cover: _wire2api_opt_uint_8_list(arr[2]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_8_list(raw);
  }

  Position _wire2api_position(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Position(
      chapter: _wire2api_usize(arr[0]),
      offset: _wire2api_f64(arr[1]),
    );
  }

  T _wire2api_t(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return T(
      path: _wire2api_String(arr[0]),
      content: _wire2api_uint_8_list(arr[1]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Database> api2wire_box_autoadd_database(Database raw) {
    final ptr = inner.new_box_autoadd_database_0();
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DocumentId> api2wire_box_autoadd_document_id(
      DocumentId raw) {
    final ptr = inner.new_box_autoadd_document_id_0();
    _api_fill_to_wire_document_id(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_document_id(
      DocumentId apiObj, ffi.Pointer<wire_DocumentId> wireObj) {
    _api_fill_to_wire_document_id(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_database(Database apiObj, wire_Database wireObj) {}

  void _api_fill_to_wire_document_id(
      DocumentId apiObj, wire_DocumentId wireObj) {
    wireObj.field0 = api2wire_u32(apiObj.field0);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_open_doc(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    int initial_chapter,
  ) {
    return _wire_open_doc(
      port_,
      path,
      initial_chapter,
    );
  }

  late final _wire_open_docPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr)>>('wire_open_doc');
  late final _wire_open_doc = _wire_open_docPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_go_next(
    int port_,
    ffi.Pointer<wire_DocumentId> id,
  ) {
    return _wire_go_next(
      port_,
      id,
    );
  }

  late final _wire_go_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_DocumentId>)>>('wire_go_next');
  late final _wire_go_next = _wire_go_nextPtr
      .asFunction<void Function(int, ffi.Pointer<wire_DocumentId>)>();

  void wire_go_prev(
    int port_,
    ffi.Pointer<wire_DocumentId> id,
  ) {
    return _wire_go_prev(
      port_,
      id,
    );
  }

  late final _wire_go_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_DocumentId>)>>('wire_go_prev');
  late final _wire_go_prev = _wire_go_prevPtr
      .asFunction<void Function(int, ffi.Pointer<wire_DocumentId>)>();

  void wire_get_content(
    int port_,
    ffi.Pointer<wire_DocumentId> id,
  ) {
    return _wire_get_content(
      port_,
      id,
    );
  }

  late final _wire_get_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_DocumentId>)>>('wire_get_content');
  late final _wire_get_content = _wire_get_contentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_DocumentId>)>();

  void wire_get_resources(
    int port_,
    ffi.Pointer<wire_DocumentId> id,
  ) {
    return _wire_get_resources(
      port_,
      id,
    );
  }

  late final _wire_get_resourcesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_DocumentId>)>>('wire_get_resources');
  late final _wire_get_resources = _wire_get_resourcesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_DocumentId>)>();

  void wire_auth(
    int port_,
  ) {
    return _wire_auth(
      port_,
    );
  }

  late final _wire_authPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_auth');
  late final _wire_auth = _wire_authPtr.asFunction<void Function(int)>();

  void wire_poll(
    int port_,
  ) {
    return _wire_poll(
      port_,
    );
  }

  late final _wire_pollPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_poll');
  late final _wire_poll = _wire_pollPtr.asFunction<void Function(int)>();

  void wire_sync2(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_sync2(
      port_,
      path,
    );
  }

  late final _wire_sync2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_sync2');
  late final _wire_sync2 = _wire_sync2Ptr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_db(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_init_db(
      port_,
      path,
    );
  }

  late final _wire_init_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_init_db');
  late final _wire_init_db = _wire_init_dbPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_meta(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_get_meta(
      port_,
      id,
    );
  }

  late final _wire_get_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_get_meta');
  late final _wire_get_meta = _wire_get_metaPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_clear_db(
    int port_,
  ) {
    return _wire_clear_db(
      port_,
    );
  }

  late final _wire_clear_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_clear_db');
  late final _wire_clear_db =
      _wire_clear_dbPtr.asFunction<void Function(int)>();

  void wire_get_definition(
    int port_,
    ffi.Pointer<wire_uint_8_list> word,
  ) {
    return _wire_get_definition(
      port_,
      word,
    );
  }

  late final _wire_get_definitionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_definition');
  late final _wire_get_definition = _wire_get_definitionPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_book__method__Database(
    int port_,
    ffi.Pointer<wire_Database> that,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_add_book__method__Database(
      port_,
      that,
      path,
    );
  }

  late final _wire_add_book__method__DatabasePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Database>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_add_book__method__Database');
  late final _wire_add_book__method__Database =
      _wire_add_book__method__DatabasePtr.asFunction<
          void Function(int, ffi.Pointer<wire_Database>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_update_progress__method__Database(
    int port_,
    ffi.Pointer<wire_Database> that,
    ffi.Pointer<wire_uint_8_list> id,
    int chapter,
    double offset,
  ) {
    return _wire_update_progress__method__Database(
      port_,
      that,
      id,
      chapter,
      offset,
    );
  }

  late final _wire_update_progress__method__DatabasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Database>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr,
              ffi.Double)>>('wire_update_progress__method__Database');
  late final _wire_update_progress__method__Database =
      _wire_update_progress__method__DatabasePtr.asFunction<
          void Function(int, ffi.Pointer<wire_Database>,
              ffi.Pointer<wire_uint_8_list>, int, double)>();

  void wire_get_books__method__Database(
    int port_,
    ffi.Pointer<wire_Database> that,
  ) {
    return _wire_get_books__method__Database(
      port_,
      that,
    );
  }

  late final _wire_get_books__method__DatabasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Database>)>>('wire_get_books__method__Database');
  late final _wire_get_books__method__Database =
      _wire_get_books__method__DatabasePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Database>)>();

  ffi.Pointer<wire_Database> new_box_autoadd_database_0() {
    return _new_box_autoadd_database_0();
  }

  late final _new_box_autoadd_database_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Database> Function()>>(
          'new_box_autoadd_database_0');
  late final _new_box_autoadd_database_0 = _new_box_autoadd_database_0Ptr
      .asFunction<ffi.Pointer<wire_Database> Function()>();

  ffi.Pointer<wire_DocumentId> new_box_autoadd_document_id_0() {
    return _new_box_autoadd_document_id_0();
  }

  late final _new_box_autoadd_document_id_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DocumentId> Function()>>(
          'new_box_autoadd_document_id_0');
  late final _new_box_autoadd_document_id_0 = _new_box_autoadd_document_id_0Ptr
      .asFunction<ffi.Pointer<wire_DocumentId> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_DocumentId extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

class wire_Database extends ffi.Opaque {}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
