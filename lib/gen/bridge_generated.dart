// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.65.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<void> openDoc({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_open_doc(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kOpenDocConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpenDocConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "open_doc",
        argNames: ["path"],
      );

  Future<void> goNext({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_go_next(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kGoNextConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGoNextConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "go_next",
        argNames: [],
      );

  Future<void> goPrev({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_go_prev(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kGoPrevConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGoPrevConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "go_prev",
        argNames: [],
      );

  Future<String> getContent({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_content(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kGetContentConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetContentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_content",
        argNames: [],
      );

  Future<String> auth({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_auth(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kAuthConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAuthConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "auth",
        argNames: [],
      );

  Future<void> poll({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_poll(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kPollConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPollConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "poll",
        argNames: [],
      );

  Future<void> sync2({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sync2(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSync2ConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSync2ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sync2",
        argNames: ["path"],
      );

  Future<Database> initDb({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_db(port_, arg0),
      parseSuccessData: (d) => _wire2api_database(d),
      constMeta: kInitDbConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitDbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_db",
        argNames: ["path"],
      );

  Future<void> clearDb({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_clear_db(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kClearDbConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearDbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "clear_db",
        argNames: ["path"],
      );

  Future<List<Book>> addMethodDatabase(
      {required Database that, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_database(that);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_add__method__Database(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_book,
      constMeta: kAddMethodDatabaseConstMeta,
      argValues: [that, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddMethodDatabaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add__method__Database",
        argNames: ["that", "path"],
      );

  Future<List<Book>> getBooksMethodDatabase(
      {required Database that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_database(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_books__method__Database(port_, arg0),
      parseSuccessData: _wire2api_list_book,
      constMeta: kGetBooksMethodDatabaseConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBooksMethodDatabaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_books__method__Database",
        argNames: ["that"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Book _wire2api_book(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Book(
      uuid: _wire2api_String(arr[0]),
      path: _wire2api_String(arr[1]),
    );
  }

  Database _wire2api_database(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Database(
      bridge: this,
      path: _wire2api_String(arr[0]),
    );
  }

  List<Book> _wire2api_list_book(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_book).toList();
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Database> api2wire_box_autoadd_database(Database raw) {
    final ptr = inner.new_box_autoadd_database_0();
    _api_fill_to_wire_database(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_database(
      Database apiObj, ffi.Pointer<wire_Database> wireObj) {
    _api_fill_to_wire_database(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_database(Database apiObj, wire_Database wireObj) {
    wireObj.path = api2wire_String(apiObj.path);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_open_doc(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_open_doc(
      port_,
      path,
    );
  }

  late final _wire_open_docPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_open_doc');
  late final _wire_open_doc = _wire_open_docPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_go_next(
    int port_,
  ) {
    return _wire_go_next(
      port_,
    );
  }

  late final _wire_go_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_go_next');
  late final _wire_go_next = _wire_go_nextPtr.asFunction<void Function(int)>();

  void wire_go_prev(
    int port_,
  ) {
    return _wire_go_prev(
      port_,
    );
  }

  late final _wire_go_prevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_go_prev');
  late final _wire_go_prev = _wire_go_prevPtr.asFunction<void Function(int)>();

  void wire_get_content(
    int port_,
  ) {
    return _wire_get_content(
      port_,
    );
  }

  late final _wire_get_contentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_content');
  late final _wire_get_content =
      _wire_get_contentPtr.asFunction<void Function(int)>();

  void wire_auth(
    int port_,
  ) {
    return _wire_auth(
      port_,
    );
  }

  late final _wire_authPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_auth');
  late final _wire_auth = _wire_authPtr.asFunction<void Function(int)>();

  void wire_poll(
    int port_,
  ) {
    return _wire_poll(
      port_,
    );
  }

  late final _wire_pollPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_poll');
  late final _wire_poll = _wire_pollPtr.asFunction<void Function(int)>();

  void wire_sync2(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_sync2(
      port_,
      path,
    );
  }

  late final _wire_sync2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_sync2');
  late final _wire_sync2 = _wire_sync2Ptr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_db(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_init_db(
      port_,
      path,
    );
  }

  late final _wire_init_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_init_db');
  late final _wire_init_db = _wire_init_dbPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_clear_db(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_clear_db(
      port_,
      path,
    );
  }

  late final _wire_clear_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_clear_db');
  late final _wire_clear_db = _wire_clear_dbPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add__method__Database(
    int port_,
    ffi.Pointer<wire_Database> that,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_add__method__Database(
      port_,
      that,
      path,
    );
  }

  late final _wire_add__method__DatabasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Database>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_add__method__Database');
  late final _wire_add__method__Database =
      _wire_add__method__DatabasePtr.asFunction<
          void Function(int, ffi.Pointer<wire_Database>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_books__method__Database(
    int port_,
    ffi.Pointer<wire_Database> that,
  ) {
    return _wire_get_books__method__Database(
      port_,
      that,
    );
  }

  late final _wire_get_books__method__DatabasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Database>)>>('wire_get_books__method__Database');
  late final _wire_get_books__method__Database =
      _wire_get_books__method__DatabasePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Database>)>();

  ffi.Pointer<wire_Database> new_box_autoadd_database_0() {
    return _new_box_autoadd_database_0();
  }

  late final _new_box_autoadd_database_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Database> Function()>>(
          'new_box_autoadd_database_0');
  late final _new_box_autoadd_database_0 = _new_box_autoadd_database_0Ptr
      .asFunction<ffi.Pointer<wire_Database> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Database extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> path;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
