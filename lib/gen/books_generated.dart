// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'books_generated.freezed.dart';

abstract class Books {
  Future<void> initApp({required String dataDir, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitAppConstMeta;

  Future<OpenDocument> openDoc(
      {required String path, int? initialChapter, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpenDocConstMeta;

  Future<Database> getDb({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDbConstMeta;

  Future<void> clearDb({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearDbConstMeta;

  Future<Meta> getMeta({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMetaConstMeta;

  Future<ContentBlock> goNextMethodOpenDocument(
      {required OpenDocument that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGoNextMethodOpenDocumentConstMeta;

  Future<ContentBlock> goPrevMethodOpenDocument(
      {required OpenDocument that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGoPrevMethodOpenDocumentConstMeta;

  Future<GoUrlResult> goUrlMethodOpenDocument(
      {required OpenDocument that, required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGoUrlMethodOpenDocumentConstMeta;

  Future<ContentBlock> getContentMethodOpenDocument(
      {required OpenDocument that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetContentMethodOpenDocumentConstMeta;

  Future<Uint8List> getResourceMethodOpenDocument(
      {required OpenDocument that, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetResourceMethodOpenDocumentConstMeta;

  Future<List<TocEntry>> getTocMethodOpenDocument(
      {required OpenDocument that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTocMethodOpenDocumentConstMeta;

  Future<List<Book>> addBookMethodDatabase(
      {required Database that, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddBookMethodDatabaseConstMeta;

  Future<void> updateProgressMethodDatabase(
      {required Database that,
      required String id,
      required int chapter,
      required double offset,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateProgressMethodDatabaseConstMeta;

  Future<List<Book>> getBooksMethodDatabase(
      {required Database that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBooksMethodDatabaseConstMeta;

  Future<Book> getBookMethodDatabase(
      {required Database that, required String uuid, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBookMethodDatabaseConstMeta;
}

class Book {
  final String uuid;
  final String path;
  final Position position;

  const Book({
    required this.uuid,
    required this.path,
    required this.position,
  });
}

class ContentBlock {
  final String content;
  final int chapter;
  final ContentType contentType;

  const ContentBlock({
    required this.content,
    required this.chapter,
    required this.contentType,
  });
}

@freezed
class ContentType with _$ContentType {
  const factory ContentType.html({
    String? extraCss,
  }) = ContentType_Html;
}

class Database {
  final Books bridge;

  const Database({
    required this.bridge,
  });

  Future<List<Book>> addBook({required String path, dynamic hint}) =>
      bridge.addBookMethodDatabase(
        that: this,
        path: path,
      );

  Future<void> updateProgress(
          {required String id,
          required int chapter,
          required double offset,
          dynamic hint}) =>
      bridge.updateProgressMethodDatabase(
        that: this,
        id: id,
        chapter: chapter,
        offset: offset,
      );

  Future<List<Book>> getBooks({dynamic hint}) => bridge.getBooksMethodDatabase(
        that: this,
      );

  Future<Book> getBook({required String uuid, dynamic hint}) =>
      bridge.getBookMethodDatabase(
        that: this,
        uuid: uuid,
      );
}

class GoUrlResult {
  final ContentBlock content;
  final int chapter;

  const GoUrlResult({
    required this.content,
    required this.chapter,
  });
}

class Meta {
  final String? title;
  final String? author;
  final Uint8List? cover;

  const Meta({
    this.title,
    this.author,
    this.cover,
  });
}

class OpenDocument {
  final Books bridge;
  final OpenDocumentId id;

  const OpenDocument({
    required this.bridge,
    required this.id,
  });

  Future<ContentBlock> goNext({dynamic hint}) =>
      bridge.goNextMethodOpenDocument(
        that: this,
      );

  Future<ContentBlock> goPrev({dynamic hint}) =>
      bridge.goPrevMethodOpenDocument(
        that: this,
      );

  Future<GoUrlResult> goUrl({required String url, dynamic hint}) =>
      bridge.goUrlMethodOpenDocument(
        that: this,
        url: url,
      );

  Future<ContentBlock> getContent({dynamic hint}) =>
      bridge.getContentMethodOpenDocument(
        that: this,
      );

  Future<Uint8List> getResource({required String path, dynamic hint}) =>
      bridge.getResourceMethodOpenDocument(
        that: this,
        path: path,
      );

  Future<List<TocEntry>> getToc({dynamic hint}) =>
      bridge.getTocMethodOpenDocument(
        that: this,
      );
}

class OpenDocumentId {
  final int field0;

  const OpenDocumentId({
    required this.field0,
  });
}

class Position {
  final int chapter;
  final double offset;

  const Position({
    required this.chapter,
    required this.offset,
  });
}

class TocEntry {
  final String label;
  final String url;
  final int count;

  const TocEntry({
    required this.label,
    required this.url,
    required this.count,
  });
}

class BooksImpl implements Books {
  final BooksPlatform _platform;
  factory BooksImpl(ExternalLibrary dylib) =>
      BooksImpl.raw(BooksPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory BooksImpl.wasm(FutureOr<WasmModule> module) =>
      BooksImpl(module as ExternalLibrary);
  BooksImpl.raw(this._platform);
  Future<void> initApp({required String dataDir, dynamic hint}) {
    var arg0 = _platform.api2wire_String(dataDir);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_app(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitAppConstMeta,
      argValues: [dataDir],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitAppConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_app",
        argNames: ["dataDir"],
      );

  Future<OpenDocument> openDoc(
      {required String path, int? initialChapter, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_opt_box_autoadd_usize(initialChapter);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_open_doc(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_open_document(d),
      constMeta: kOpenDocConstMeta,
      argValues: [path, initialChapter],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpenDocConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "open_doc",
        argNames: ["path", "initialChapter"],
      );

  Future<Database> getDb({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_db(port_),
      parseSuccessData: (d) => _wire2api_database(d),
      constMeta: kGetDbConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_db",
        argNames: [],
      );

  Future<void> clearDb({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_clear_db(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kClearDbConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearDbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "clear_db",
        argNames: [],
      );

  Future<Meta> getMeta({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_meta(port_, arg0),
      parseSuccessData: _wire2api_meta,
      constMeta: kGetMetaConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetMetaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_meta",
        argNames: ["id"],
      );

  Future<ContentBlock> goNextMethodOpenDocument(
      {required OpenDocument that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_open_document(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_go_next__method__OpenDocument(port_, arg0),
      parseSuccessData: _wire2api_content_block,
      constMeta: kGoNextMethodOpenDocumentConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGoNextMethodOpenDocumentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "go_next__method__OpenDocument",
        argNames: ["that"],
      );

  Future<ContentBlock> goPrevMethodOpenDocument(
      {required OpenDocument that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_open_document(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_go_prev__method__OpenDocument(port_, arg0),
      parseSuccessData: _wire2api_content_block,
      constMeta: kGoPrevMethodOpenDocumentConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGoPrevMethodOpenDocumentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "go_prev__method__OpenDocument",
        argNames: ["that"],
      );

  Future<GoUrlResult> goUrlMethodOpenDocument(
      {required OpenDocument that, required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_open_document(that);
    var arg1 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_go_url__method__OpenDocument(port_, arg0, arg1),
      parseSuccessData: _wire2api_go_url_result,
      constMeta: kGoUrlMethodOpenDocumentConstMeta,
      argValues: [that, url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGoUrlMethodOpenDocumentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "go_url__method__OpenDocument",
        argNames: ["that", "url"],
      );

  Future<ContentBlock> getContentMethodOpenDocument(
      {required OpenDocument that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_open_document(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_content__method__OpenDocument(port_, arg0),
      parseSuccessData: _wire2api_content_block,
      constMeta: kGetContentMethodOpenDocumentConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetContentMethodOpenDocumentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_content__method__OpenDocument",
        argNames: ["that"],
      );

  Future<Uint8List> getResourceMethodOpenDocument(
      {required OpenDocument that, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_open_document(that);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_resource__method__OpenDocument(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kGetResourceMethodOpenDocumentConstMeta,
      argValues: [that, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetResourceMethodOpenDocumentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_resource__method__OpenDocument",
        argNames: ["that", "path"],
      );

  Future<List<TocEntry>> getTocMethodOpenDocument(
      {required OpenDocument that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_open_document(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_toc__method__OpenDocument(port_, arg0),
      parseSuccessData: _wire2api_list_toc_entry,
      constMeta: kGetTocMethodOpenDocumentConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTocMethodOpenDocumentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_toc__method__OpenDocument",
        argNames: ["that"],
      );

  Future<List<Book>> addBookMethodDatabase(
      {required Database that, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_database(that);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_add_book__method__Database(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_book,
      constMeta: kAddBookMethodDatabaseConstMeta,
      argValues: [that, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddBookMethodDatabaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_book__method__Database",
        argNames: ["that", "path"],
      );

  Future<void> updateProgressMethodDatabase(
      {required Database that,
      required String id,
      required int chapter,
      required double offset,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_database(that);
    var arg1 = _platform.api2wire_String(id);
    var arg2 = api2wire_usize(chapter);
    var arg3 = api2wire_f64(offset);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_update_progress__method__Database(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kUpdateProgressMethodDatabaseConstMeta,
      argValues: [that, id, chapter, offset],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateProgressMethodDatabaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update_progress__method__Database",
        argNames: ["that", "id", "chapter", "offset"],
      );

  Future<List<Book>> getBooksMethodDatabase(
      {required Database that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_database(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_books__method__Database(port_, arg0),
      parseSuccessData: _wire2api_list_book,
      constMeta: kGetBooksMethodDatabaseConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBooksMethodDatabaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_books__method__Database",
        argNames: ["that"],
      );

  Future<Book> getBookMethodDatabase(
      {required Database that, required String uuid, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_database(that);
    var arg1 = _platform.api2wire_String(uuid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_book__method__Database(port_, arg0, arg1),
      parseSuccessData: _wire2api_book,
      constMeta: kGetBookMethodDatabaseConstMeta,
      argValues: [that, uuid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBookMethodDatabaseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_book__method__Database",
        argNames: ["that", "uuid"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Book _wire2api_book(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Book(
      uuid: _wire2api_String(arr[0]),
      path: _wire2api_String(arr[1]),
      position: _wire2api_position(arr[2]),
    );
  }

  ContentBlock _wire2api_content_block(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ContentBlock(
      content: _wire2api_String(arr[0]),
      chapter: _wire2api_usize(arr[1]),
      contentType: _wire2api_content_type(arr[2]),
    );
  }

  ContentType _wire2api_content_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ContentType_Html(
          extraCss: _wire2api_opt_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Database _wire2api_database(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Database(
      bridge: this,
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  GoUrlResult _wire2api_go_url_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GoUrlResult(
      content: _wire2api_content_block(arr[0]),
      chapter: _wire2api_usize(arr[1]),
    );
  }

  List<Book> _wire2api_list_book(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_book).toList();
  }

  List<TocEntry> _wire2api_list_toc_entry(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_toc_entry).toList();
  }

  Meta _wire2api_meta(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Meta(
      title: _wire2api_opt_String(arr[0]),
      author: _wire2api_opt_String(arr[1]),
      cover: _wire2api_opt_uint_8_list(arr[2]),
    );
  }

  OpenDocument _wire2api_open_document(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OpenDocument(
      bridge: this,
      id: _wire2api_open_document_id(arr[0]),
    );
  }

  OpenDocumentId _wire2api_open_document_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OpenDocumentId(
      field0: _wire2api_u64(arr[0]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_8_list(raw);
  }

  Position _wire2api_position(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Position(
      chapter: _wire2api_usize(arr[0]),
      offset: _wire2api_f64(arr[1]),
    );
  }

  TocEntry _wire2api_toc_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TocEntry(
      label: _wire2api_String(arr[0]),
      url: _wire2api_String(arr[1]),
      count: _wire2api_usize(arr[2]),
    );
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class BooksPlatform extends FlutterRustBridgeBase<BooksWire> {
  BooksPlatform(ffi.DynamicLibrary dylib) : super(BooksWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Database> api2wire_box_autoadd_database(Database raw) {
    final ptr = inner.new_box_autoadd_database_0();
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OpenDocument> api2wire_box_autoadd_open_document(
      OpenDocument raw) {
    final ptr = inner.new_box_autoadd_open_document_0();
    _api_fill_to_wire_open_document(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_box_autoadd_usize(int raw) {
    return inner.new_box_autoadd_usize_0(api2wire_usize(raw));
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_opt_box_autoadd_usize(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_usize(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_open_document(
      OpenDocument apiObj, ffi.Pointer<wire_OpenDocument> wireObj) {
    _api_fill_to_wire_open_document(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_database(Database apiObj, wire_Database wireObj) {}

  void _api_fill_to_wire_open_document(
      OpenDocument apiObj, wire_OpenDocument wireObj) {
    _api_fill_to_wire_open_document_id(apiObj.id, wireObj.id);
  }

  void _api_fill_to_wire_open_document_id(
      OpenDocumentId apiObj, wire_OpenDocumentId wireObj) {
    wireObj.field0 = api2wire_u64(apiObj.field0);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BooksWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BooksWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BooksWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init_app(
    int port_,
    ffi.Pointer<wire_uint_8_list> data_dir,
  ) {
    return _wire_init_app(
      port_,
      data_dir,
    );
  }

  late final _wire_init_appPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_init_app');
  late final _wire_init_app = _wire_init_appPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_open_doc(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<ffi.UintPtr> initial_chapter,
  ) {
    return _wire_open_doc(
      port_,
      path,
      initial_chapter,
    );
  }

  late final _wire_open_docPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_open_doc');
  late final _wire_open_doc = _wire_open_docPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.UintPtr>)>();

  void wire_get_db(
    int port_,
  ) {
    return _wire_get_db(
      port_,
    );
  }

  late final _wire_get_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_db');
  late final _wire_get_db = _wire_get_dbPtr.asFunction<void Function(int)>();

  void wire_clear_db(
    int port_,
  ) {
    return _wire_clear_db(
      port_,
    );
  }

  late final _wire_clear_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_clear_db');
  late final _wire_clear_db =
      _wire_clear_dbPtr.asFunction<void Function(int)>();

  void wire_get_meta(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_get_meta(
      port_,
      id,
    );
  }

  late final _wire_get_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_get_meta');
  late final _wire_get_meta = _wire_get_metaPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_go_next__method__OpenDocument(
    int port_,
    ffi.Pointer<wire_OpenDocument> that,
  ) {
    return _wire_go_next__method__OpenDocument(
      port_,
      that,
    );
  }

  late final _wire_go_next__method__OpenDocumentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OpenDocument>)>>(
      'wire_go_next__method__OpenDocument');
  late final _wire_go_next__method__OpenDocument =
      _wire_go_next__method__OpenDocumentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_OpenDocument>)>();

  void wire_go_prev__method__OpenDocument(
    int port_,
    ffi.Pointer<wire_OpenDocument> that,
  ) {
    return _wire_go_prev__method__OpenDocument(
      port_,
      that,
    );
  }

  late final _wire_go_prev__method__OpenDocumentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OpenDocument>)>>(
      'wire_go_prev__method__OpenDocument');
  late final _wire_go_prev__method__OpenDocument =
      _wire_go_prev__method__OpenDocumentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_OpenDocument>)>();

  void wire_go_url__method__OpenDocument(
    int port_,
    ffi.Pointer<wire_OpenDocument> that,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_go_url__method__OpenDocument(
      port_,
      that,
      url,
    );
  }

  late final _wire_go_url__method__OpenDocumentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OpenDocument>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_go_url__method__OpenDocument');
  late final _wire_go_url__method__OpenDocument =
      _wire_go_url__method__OpenDocumentPtr.asFunction<
          void Function(int, ffi.Pointer<wire_OpenDocument>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_content__method__OpenDocument(
    int port_,
    ffi.Pointer<wire_OpenDocument> that,
  ) {
    return _wire_get_content__method__OpenDocument(
      port_,
      that,
    );
  }

  late final _wire_get_content__method__OpenDocumentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OpenDocument>)>>(
      'wire_get_content__method__OpenDocument');
  late final _wire_get_content__method__OpenDocument =
      _wire_get_content__method__OpenDocumentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_OpenDocument>)>();

  void wire_get_resource__method__OpenDocument(
    int port_,
    ffi.Pointer<wire_OpenDocument> that,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_get_resource__method__OpenDocument(
      port_,
      that,
      path,
    );
  }

  late final _wire_get_resource__method__OpenDocumentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OpenDocument>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_resource__method__OpenDocument');
  late final _wire_get_resource__method__OpenDocument =
      _wire_get_resource__method__OpenDocumentPtr.asFunction<
          void Function(int, ffi.Pointer<wire_OpenDocument>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_toc__method__OpenDocument(
    int port_,
    ffi.Pointer<wire_OpenDocument> that,
  ) {
    return _wire_get_toc__method__OpenDocument(
      port_,
      that,
    );
  }

  late final _wire_get_toc__method__OpenDocumentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OpenDocument>)>>(
      'wire_get_toc__method__OpenDocument');
  late final _wire_get_toc__method__OpenDocument =
      _wire_get_toc__method__OpenDocumentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_OpenDocument>)>();

  void wire_add_book__method__Database(
    int port_,
    ffi.Pointer<wire_Database> that,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_add_book__method__Database(
      port_,
      that,
      path,
    );
  }

  late final _wire_add_book__method__DatabasePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Database>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_add_book__method__Database');
  late final _wire_add_book__method__Database =
      _wire_add_book__method__DatabasePtr.asFunction<
          void Function(int, ffi.Pointer<wire_Database>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_update_progress__method__Database(
    int port_,
    ffi.Pointer<wire_Database> that,
    ffi.Pointer<wire_uint_8_list> id,
    int chapter,
    double offset,
  ) {
    return _wire_update_progress__method__Database(
      port_,
      that,
      id,
      chapter,
      offset,
    );
  }

  late final _wire_update_progress__method__DatabasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Database>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr,
              ffi.Double)>>('wire_update_progress__method__Database');
  late final _wire_update_progress__method__Database =
      _wire_update_progress__method__DatabasePtr.asFunction<
          void Function(int, ffi.Pointer<wire_Database>,
              ffi.Pointer<wire_uint_8_list>, int, double)>();

  void wire_get_books__method__Database(
    int port_,
    ffi.Pointer<wire_Database> that,
  ) {
    return _wire_get_books__method__Database(
      port_,
      that,
    );
  }

  late final _wire_get_books__method__DatabasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Database>)>>('wire_get_books__method__Database');
  late final _wire_get_books__method__Database =
      _wire_get_books__method__DatabasePtr
          .asFunction<void Function(int, ffi.Pointer<wire_Database>)>();

  void wire_get_book__method__Database(
    int port_,
    ffi.Pointer<wire_Database> that,
    ffi.Pointer<wire_uint_8_list> uuid,
  ) {
    return _wire_get_book__method__Database(
      port_,
      that,
      uuid,
    );
  }

  late final _wire_get_book__method__DatabasePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Database>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_book__method__Database');
  late final _wire_get_book__method__Database =
      _wire_get_book__method__DatabasePtr.asFunction<
          void Function(int, ffi.Pointer<wire_Database>,
              ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_Database> new_box_autoadd_database_0() {
    return _new_box_autoadd_database_0();
  }

  late final _new_box_autoadd_database_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Database> Function()>>(
          'new_box_autoadd_database_0');
  late final _new_box_autoadd_database_0 = _new_box_autoadd_database_0Ptr
      .asFunction<ffi.Pointer<wire_Database> Function()>();

  ffi.Pointer<wire_OpenDocument> new_box_autoadd_open_document_0() {
    return _new_box_autoadd_open_document_0();
  }

  late final _new_box_autoadd_open_document_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OpenDocument> Function()>>(
          'new_box_autoadd_open_document_0');
  late final _new_box_autoadd_open_document_0 =
      _new_box_autoadd_open_document_0Ptr
          .asFunction<ffi.Pointer<wire_OpenDocument> Function()>();

  ffi.Pointer<ffi.UintPtr> new_box_autoadd_usize_0(
    int value,
  ) {
    return _new_box_autoadd_usize_0(
      value,
    );
  }

  late final _new_box_autoadd_usize_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.UintPtr> Function(ffi.UintPtr)>>(
      'new_box_autoadd_usize_0');
  late final _new_box_autoadd_usize_0 = _new_box_autoadd_usize_0Ptr
      .asFunction<ffi.Pointer<ffi.UintPtr> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();

  void wire_get_token(
    int port_,
    ffi.Pointer<wire_GithubUser> user,
  ) {
    return _wire_get_token(
      port_,
      user,
    );
  }

  late final _wire_get_tokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_GithubUser>)>>('wire_get_token');
  late final _wire_get_token = _wire_get_tokenPtr
      .asFunction<void Function(int, ffi.Pointer<wire_GithubUser>)>();

  ffi.Pointer<wire_DeviceFlowResponse>
      new_box_autoadd_device_flow_response_1() {
    return _new_box_autoadd_device_flow_response_1();
  }

  late final _new_box_autoadd_device_flow_response_1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_DeviceFlowResponse> Function()>>(
      'new_box_autoadd_device_flow_response_1');
  late final _new_box_autoadd_device_flow_response_1 =
      _new_box_autoadd_device_flow_response_1Ptr
          .asFunction<ffi.Pointer<wire_DeviceFlowResponse> Function()>();

  ffi.Pointer<wire_GithubUser> new_box_autoadd_github_user_1() {
    return _new_box_autoadd_github_user_1();
  }

  late final _new_box_autoadd_github_user_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_GithubUser> Function()>>(
          'new_box_autoadd_github_user_1');
  late final _new_box_autoadd_github_user_1 = _new_box_autoadd_github_user_1Ptr
      .asFunction<ffi.Pointer<wire_GithubUser> Function()>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_OpenDocumentId extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

class wire_OpenDocument extends ffi.Struct {
  external wire_OpenDocumentId id;
}

class wire_Database extends ffi.Opaque {}

class wire_GithubUser extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> login;

  @ffi.Uint64()
  external int id;
}

class wire_DeviceFlowResponse extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_code;

  external ffi.Pointer<wire_uint_8_list> user_code;

  external ffi.Pointer<wire_uint_8_list> verification_uri;

  @ffi.Uint64()
  external int interval;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
