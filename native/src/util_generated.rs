#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.1.

use crate::util::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::types::Definition;
use crate::types::Definitions;
use crate::types::DeviceFlowResponse;
use crate::types::GithubUser;
use crate::types::Meaning;

// Section: wire functions

fn wire_auth_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "auth",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| auth(),
    )
}
fn wire_poll_impl(port_: MessagePort, ongoing: impl Wire2Api<DeviceFlowResponse> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "poll",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ongoing = ongoing.wire2api();
            move |task_callback| poll(api_ongoing)
        },
    )
}
fn wire_upload_file_impl(
    port_: MessagePort,
    repo: impl Wire2Api<String> + UnwindSafe,
    uuid: impl Wire2Api<String> + UnwindSafe,
    user: impl Wire2Api<GithubUser> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "upload_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_repo = repo.wire2api();
            let api_uuid = uuid.wire2api();
            let api_user = user.wire2api();
            move |task_callback| upload_file(api_repo, api_uuid, api_user)
        },
    )
}
fn wire_update_files_impl(
    port_: MessagePort,
    repo: impl Wire2Api<String> + UnwindSafe,
    user: impl Wire2Api<GithubUser> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "update_files",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_repo = repo.wire2api();
            let api_user = user.wire2api();
            move |task_callback| update_files(api_repo, api_user)
        },
    )
}
fn wire_font_search_impl(port_: MessagePort, query: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "font_search",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_query = query.wire2api();
            move |task_callback| Ok(font_search(api_query))
        },
    )
}
fn wire_get_definition_impl(port_: MessagePort, word: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_definition",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_word = word.wire2api();
            move |task_callback| get_definition(api_word)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for Definition {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.definition.into_dart(),
            self.example.into_dart(),
            self.synonyms.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Definition {}

impl support::IntoDart for Definitions {
    fn into_dart(self) -> support::DartAbi {
        vec![self.word.into_dart(), self.meanings.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Definitions {}

impl support::IntoDart for DeviceFlowResponse {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.device_code.into_dart(),
            self.user_code.into_dart(),
            self.verification_uri.into_dart(),
            self.interval.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DeviceFlowResponse {}

impl support::IntoDart for GithubUser {
    fn into_dart(self) -> support::DartAbi {
        vec![self.login.into_dart(), self.id.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GithubUser {}

impl support::IntoDart for Meaning {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.part_of_speech.into_dart(),
            self.definitions.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Meaning {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "util_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
